import YouTube from "react-youtube";
import { useEffect, useRef, useState } from "react";

import { VideoSummarization } from "../../queries/summarize";
import { cn } from "../../utils/cn";
import { SiteBadge } from "../site-badge/site-badge";
import { AlgorithmBadge } from "../algorithm-badge/algirithm-badge";

export interface VideoSummaryProps {
  className?: string;
  summary: VideoSummarization;
}

export function VideoSummary({ summary }: VideoSummaryProps) {
  const match = summary.url.match(/(.*(\/|v=))(.+)$/);
  const videoId = match?.[3];

  const buffer = 0.25;

  const captionsContainerRef = useRef<HTMLDivElement>(null);
  const [index, setIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [videoPlayer, setVideoPlayer] = useState<any>(null);

  // when the index changes, scroll to the caption
  useEffect(() => {
    const element = captionsContainerRef.current?.querySelector(
      `[data-captionindex="${index}"]`
    ) as HTMLElement;
    if (element) {
      captionsContainerRef.current?.scrollTo({
        top: element.offsetTop - 100,
        behavior: "smooth",
      });
    }
  }, [index, isPlaying]);

  // seek to the current index
  useEffect(() => {
    if (!videoPlayer || !isPlaying) {
      return;
    }

    const current = summary.summary[index];
    const currentTime = videoPlayer.getCurrentTime();

    if (
      currentTime < current.start - buffer ||
      currentTime > current.end + buffer
    ) {
      videoPlayer.seekTo(current.start, true);
    }
  }, [isPlaying, summary.summary, videoPlayer, index]);

  // Monitor the video player for when to change index
  useEffect(() => {
    if (!videoPlayer || !isPlaying) {
      return;
    }

    // because getCurrentTime is not 100% up to date we need to only start polling
    // after a short delay to ensure previous seekTo's have completed
    let interval: number | null = null;
    const timeout = setTimeout(() => {
      interval = setInterval(() => {
        const currentTime = videoPlayer.getCurrentTime();
        const current = summary.summary[index];
        const endSeconds = current.end + buffer;

        if (currentTime > endSeconds) {
          if (summary.summary.length - 1 == index) {
            videoPlayer.stopVideo();
          } else {
            setIndex(index + 1);
          }
        }
      }, 100);
    }, 1000);
    return () => {
      clearTimeout(timeout);
      interval && clearInterval(interval);
    };
  }, [isPlaying, index, videoPlayer, summary.summary]);

  return (
    <div className="w-full flex flex-col md:grid md:grid-cols-2 gap-8 py-8 px-4 md:px-8">
      <div className="h-full flex flex-col gap-4">
        <SiteBadge url={summary.url} icon={summary.icon} />
        <a href={summary.url} target="_blank" rel="noreferrer">
          <h1 className="text-2xl font-bold">{summary.title}</h1>
        </a>
        <YouTube
          videoId={videoId}
          opts={{ playerVars: { autoplay: 1, controls: 0 }, width: "100%" }}
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          onReady={(event: any) => {
            setVideoPlayer(event.target);
          }}
          onPlay={() => setIsPlaying(true)}
          onPause={() => setIsPlaying(false)}
        />
        <AlgorithmBadge
          algorithm={summary.algorithm}
          reductionRatio={summary.reductionRatio}
          warning={
            summary.goodSubtitles
              ? undefined
              : "Results may be inaccurate on videos with autogenerated subtitles."
          }
        />
      </div>
      <div className="h-full relative min-h-[80vh] rounded-xl bg-white shadow-lg overflow-hidden">
        <div
          className="absolute inset-0 overflow-y-scroll p-8"
          ref={captionsContainerRef}
        >
          {summary.summary.map((s, id) => (
            <div
              key={id}
              data-captionindex={id}
              className={cn(
                "p-2 px-4 rounded-lg transition-colors cursor-pointer mb-8 hover:bg-slate-100",
                index === id && "bg-yellow-100 hover:bg-yellow-200"
              )}
              onClick={() => {
                setIndex(id);
                if (!isPlaying && videoPlayer) {
                  videoPlayer.playVideo();
                }
              }}
            >
              <span className="text-slate-400">
                <Timestamp time={s.start} /> - <Timestamp time={s.end} />
              </span>
              <p
                className={cn(
                  "text-lg",
                  index === id ? "font-bold" : "text-slate-800"
                )}
              >
                {s.text}
              </p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

function Timestamp({ time }: { time: number }) {
  const hours = Math.floor(time / 3600);
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return (
    <span>
      {hours > 0 && hours + ":"}
      {minutes}:{seconds.toString().padStart(2, "0")}
    </span>
  );
}
